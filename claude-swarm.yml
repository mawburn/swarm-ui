version: 1
swarm:
  name: 'Rails + Electron Integration Team'
  main: lead_developer
  before:
    - "echo 'ðŸš€ Setting up Rails + Electron wrapper...'"
    - 'bundle install'
    - 'pnpm install'

  instances:
    lead_developer:
      description: 'Lead developer creating Electron wrapper for Rails app and handling distribution challenges'
      directory: .
      model: opus
      connections: [rails_optimizer, electron_packager, distribution_expert]
      prompt: |
        You're wrapping an existing Rails app (swarm-ui) in Electron for desktop distribution.

        Key challenges:
        - Rails uses Redis for ActionCable (need distribution solution)
        - Uses ttyd for terminal emulation
        - Uses gh CLI for GitHub integration
        - Need to bundle Ruby runtime

        Create a minimal Electron wrapper that:
        1. Starts Rails server on app launch
        2. Opens Electron window pointing to localhost:3000
        3. Handles app lifecycle properly
        4. Packages everything for distribution

        Use pnpm for all Node.js package management.
      allowed_tools: [Read, Write, Edit, Bash]

    rails_optimizer:
      description: 'Rails expert optimizing the app for desktop deployment'
      directory: .
      model: sonnet
      connections: []
      prompt: |
        Optimize the Rails app for Electron deployment:
        - Configure for production mode with SQLite
        - Set up ActionCable to work in single-user mode
        - Consider using async adapter instead of Redis for ActionCable
        - Optimize asset compilation for desktop
        - Ensure all paths work when bundled
        - Add any necessary desktop-specific features
      allowed_tools: [Read, Write, Edit, Bash]

    electron_packager:
      description: 'Electron specialist handling the wrapper and native integrations'
      directory: .
      model: sonnet
      connections: [distribution_expert]
      prompt: |
        Create the Electron wrapper:
        - Set up main process to start Rails server
        - Handle server lifecycle (start/stop with app)
        - Create native menus and shortcuts
        - Implement auto-updater
        - Handle deep linking if needed
        - Ensure window management works well
        - Add system tray support if appropriate

        Use pnpm for package management and ensure package.json is properly configured.
      allowed_tools: [Read, Write, Edit, Bash]

    distribution_expert:
      description: 'Distribution specialist handling Ruby runtime and dependency bundling'
      directory: .
      model: sonnet
      connections: []
      prompt: |
        Handle distribution challenges:
        - Research embedding Ruby runtime (traveling-ruby or similar)
        - Bundle all gems with the app
        - Handle native gem compilation
        - Deal with Redis dependency (fakeredis, embedded, or async adapter)
        - Package ttyd binary or find alternative
        - Handle gh CLI dependency
        - Set up electron-builder for cross-platform builds
        - Minimize app size where possible

        Ensure pnpm workspace is properly configured if needed for monorepo structure.
      allowed_tools: [Read, Write, Edit, Bash, WebSearch]
