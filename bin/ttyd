#!/usr/bin/env ruby
# frozen_string_literal: true

require "base64"
require "json"

# Get the base64 encoded argument
encoded_arg = ARGV.join("")

# Decode and parse JSON with symbol keys
decoded = Base64.urlsafe_decode64(encoded_arg)
params = JSON.parse(decoded, symbolize_names: true)

# Extract parameters
tmux_session_name = params[:tmux_session_name]
working_dir = params[:working_dir]
swarm_file = params[:swarm_file]
use_worktree = params[:use_worktree]
session_id = params[:session_id]
new_session = params[:new_session]
openai_api_key = params[:openai_api_key]
environment_variables = params[:environment_variables]

# Build the command
if new_session
  command = "bundle exec claude-swarm start #{swarm_file}"
  command += " --session-id #{session_id}"
  command += " --worktree" if use_worktree
else
  command = "bundle exec claude-swarm restore #{session_id}"
end

rails_root = File.expand_path("..", __dir__)
status_script = File.join(rails_root, "bin", "update_session_status")

# Mark session as active before starting
system(status_script, session_id, "active")

# Build environment for tmux session
env = {}
env["OPENAI_API_KEY"] = openai_api_key if openai_api_key && !openai_api_key.empty?

# Parse and add custom environment variables
if environment_variables && !environment_variables.empty?
  environment_variables.each_line do |line|
    line = line.strip
    next if line.empty? || line.start_with?("#")
    
    key, value = line.split("=", 2)
    if key && value
      env[key.strip] = value.strip
    end
  end
end

# Execute tmux session (this will block until the session ends)
system(env, "tmux", "-f", "config/tmux.conf", "new", "-A", "-s", tmux_session_name, "-c", working_dir, command)

# After tmux exits, mark the session as stopped
system(status_script, session_id, "stopped")
